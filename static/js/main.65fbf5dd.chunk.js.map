{"version":3,"sources":["cards.js","components/Card/Card.js","sounds/sound-flip-card.m4a","sounds/game-music-short.mp3","components/CardBoard/CardBoard.js","images/logo_rs_school_js.svg","App.js","reportWebVitals.js","index.js"],"names":["cards","id","name","Card","card","onClick","className","isFlipped","src","alt","shuffleCards","deck","i","length","j","Math","floor","random","copyCards","JSON","parse","stringify","addCardUniqueID","isOriginal","uniqueID","CardBoard","useState","settingsDeckSize","setDeckSize","settingsOpponent","setOpponent","settingsSoundVolume","setSoundVolume","settingsMusicVolume","setMusicVolume","settingsIsSoundOn","switchSound","settingsIsMusicOn","switchMusic","settingsIsNightMode","switchNightMode","isMenuStatistics","showMenuStatistics","isMenuSettings","showMenuSettings","ladder","changeLadder","gameStatus","setGameStatus","setDeck","firstCardUID","setFirstCard","currentPlayer","changePlayer","scoreA","setScoreA","scoreB","setScoreB","rememberRestCards","computerKnownCardUIDs","rememberKnownCards","computerUnknownCardUIDs","rememberUnknownCards","makeDeck","deckSize","safeCards","gameCards","slice","copiedCards","map","concat","flipSound","Howl","flipSoundUrl","autoplay","loop","volume","gameMusic","gameMusicUrl","onCardClick","play","setCardIsFlipped","prev","filter","secondCardUID","split","includes","resetChoice","setTimeout","computerMakeClick","onTurnEnd","toggleMenuStatistics","toggleMenuSettings","pairs","tempUnknownCardsUIDs","knownIDs","Set","value","index","self","indexOf","number","getRndInteger","flipUID","firstCardID","min","max","stop","htmlFor","onChange","event","target","type","defaultChecked","checked","step","result","App","fullScreenHandle","useFullScreenHandle","enter","handle","href","rel","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65fbf5dd.chunk.js","sourcesContent":["const cards = [\r\n  {id: 1, name: 'angelfish'},\r\n  {id: 2, name: 'anteater'},\r\n  {id: 3, name: 'bear'},\r\n  {id: 4, name: 'bison'},\r\n  {id: 5, name: 'boar'},\r\n  {id: 6, name: 'buffalo'},\r\n  {id: 7, name: 'camel'},\r\n  {id: 8, name: 'cancer-hermit'},\r\n  {id: 9, name: 'cat'},\r\n  {id: 10, name: 'clownfish'},\r\n  {id: 11, name: 'cow'},\r\n  {id: 12, name: 'crab'},\r\n  {id: 13, name: 'crocodile'},\r\n  {id: 14, name: 'deer'},\r\n  {id: 15, name: 'dog'},\r\n  {id: 16, name: 'dolphin'},\r\n  {id: 17, name: 'donkey'},\r\n  {id: 18, name: 'duck'},\r\n  {id: 19, name: 'elephant'},\r\n  {id: 20, name: 'fish1'},\r\n  {id: 21, name: 'fish2'},\r\n  {id: 22, name: 'fish3'},\r\n  {id: 23, name: 'fish4'},\r\n  {id: 24, name: 'fish5'},\r\n  {id: 25, name: 'fish6'},\r\n  {id: 26, name: 'fish7'},\r\n  {id: 27, name: 'fish8'},\r\n  {id: 28, name: 'flamingo'},\r\n  {id: 29, name: 'fox'},\r\n  {id: 30, name: 'fugu'},\r\n  {id: 31, name: 'giraffe'},\r\n  {id: 32, name: 'goat'},\r\n  {id: 33, name: 'goldfish'},\r\n  {id: 34, name: 'hedgehog'},\r\n  {id: 35, name: 'hippo'},\r\n  {id: 36, name: 'hippocampus'},\r\n  {id: 37, name: 'horse'},\r\n  {id: 38, name: 'jellyfish'},\r\n  {id: 39, name: 'kangaroo'},\r\n  {id: 40, name: 'killer-whale'},\r\n  {id: 41, name: 'lion'},\r\n  {id: 42, name: 'monkey'},\r\n  {id: 43, name: 'octopus'},\r\n  {id: 44, name: 'ostrich'},\r\n  {id: 45, name: 'panda'},\r\n  {id: 46, name: 'peacock'},\r\n  {id: 47, name: 'pelican'},\r\n  {id: 48, name: 'penguin'},\r\n  {id: 49, name: 'pig'},\r\n  {id: 50, name: 'rabbit'},\r\n  {id: 51, name: 'rhino'},\r\n  {id: 52, name: 'rooster'},\r\n  {id: 53, name: 'shark'},\r\n  {id: 54, name: 'sheep'},\r\n  {id: 55, name: 'shrimp'},\r\n  {id: 56, name: 'snake1'},\r\n  {id: 57, name: 'snake2'},\r\n  {id: 58, name: 'starfish'},\r\n  {id: 59, name: 'tiger'},\r\n  {id: 60, name: 'tortoise'},\r\n  {id: 61, name: 'toucan'},\r\n  {id: 62, name: 'turkey'},\r\n  {id: 63, name: 'turtle'},\r\n  {id: 64, name: 'vulture'},\r\n  {id: 65, name: 'whale'},\r\n  {id: 66, name: 'wolf'},\r\n  {id: 67, name: 'zebra'},\r\n];\r\n\r\nexport default cards;","import React from 'react';\r\nimport './card.scss';\r\n\r\nexport default function Card({ card, onClick }) {\r\n  return (\r\n    <div className={\"card\" + (card.isFlipped ? \" flipped\" : \"\")} onClick={onClick}>\r\n      <div className=\"card-inner\">\r\n        <div className=\"card-front\">\r\n          <img src={'images/' + card.name + '.png'} alt={card.name} />\r\n        </div>\r\n\r\n        <div className=\"card-back\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/sound-flip-card.e2cadc13.m4a\";","export default __webpack_public_path__ + \"static/media/game-music-short.5b81fc2f.mp3\";","import React, { useState } from 'react';\r\nimport cards from '../../cards';\r\nimport Card from '../Card/Card';\r\nimport './card-board.scss';\r\nimport { Howl } from 'howler';\r\nimport flipSoundUrl from '../../sounds/sound-flip-card.m4a';\r\nimport gameMusicUrl from '../../sounds/game-music-short.mp3';\r\n\r\nfunction shuffleCards(deck) {\r\n  for (let i = deck.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n\r\n    [deck[i], deck[j]] = [deck[j], deck[i]];\r\n  }\r\n}\r\n\r\nfunction copyCards(cards) {\r\n  return JSON.parse(JSON.stringify(cards));\r\n}\r\n\r\nfunction addCardUniqueID(card, isOriginal) {\r\n  card.uniqueID = (isOriginal) ? card.id + '-original' : card.id + '-copy';\r\n\r\n  return card;\r\n}\r\n\r\nexport default function CardBoard() {\r\n  const [settingsDeckSize, setDeckSize] = useState(18);\r\n  const [settingsOpponent, setOpponent] = useState('user');\r\n  const [settingsSoundVolume, setSoundVolume] = useState(0.5);\r\n  const [settingsMusicVolume, setMusicVolume] = useState(0.5);\r\n  const [settingsIsSoundOn, switchSound] = useState(true);\r\n  const [settingsIsMusicOn, switchMusic] = useState(true);\r\n  const [settingsIsNightMode, switchNightMode] = useState(false);\r\n\r\n  const [isMenuStatistics, showMenuStatistics] = useState(false);\r\n  const [isMenuSettings, showMenuSettings] = useState(false);\r\n\r\n  const [ladder, changeLadder] = useState([]);\r\n\r\n  const [gameStatus, setGameStatus] = useState('gamestart');\r\n  const [deck, setDeck] = useState();\r\n  const [firstCardUID, setFirstCard] = useState(null);\r\n\r\n  const [currentPlayer, changePlayer] = useState('playerA');\r\n  const [scoreA, setScoreA] = useState(0);\r\n  const [scoreB, setScoreB] = useState(0);\r\n\r\n  const [computerRestCardUIDs, rememberRestCards] = useState();\r\n  const [computerKnownCardUIDs, rememberKnownCards] = useState([]);\r\n  const [computerUnknownCardUIDs, rememberUnknownCards] = useState([]);\r\n\r\n  function makeDeck(cards, deckSize) {\r\n    let safeCards = copyCards(cards);\r\n    shuffleCards(safeCards);\r\n    let gameCards = safeCards.slice(0, deckSize / 2);\r\n  \r\n    let copiedCards = copyCards(gameCards);\r\n  \r\n    gameCards.map(card => addCardUniqueID(card, true));\r\n    copiedCards.map(card => addCardUniqueID(card, false));\r\n  \r\n    let deck = gameCards.concat(copiedCards);\r\n    shuffleCards(deck);\r\n  \r\n    if (settingsOpponent === 'computer') {\r\n      rememberRestCards(deck.map(card => card.uniqueID));\r\n      rememberUnknownCards(deck.map(card => card.uniqueID));\r\n    }\r\n  \r\n    return deck;\r\n  }\r\n\r\n  const flipSound = new Howl({\r\n    src: flipSoundUrl,\r\n    autoplay: false,\r\n    loop: false,\r\n    volume: settingsSoundVolume,\r\n  });\r\n\r\n  const gameMusic = new Howl({\r\n    src: gameMusicUrl,\r\n    autoplay: false,\r\n    loop: false,\r\n    volume: settingsMusicVolume,\r\n  });\r\n\r\n  function onCardClick(card) {\r\n    if (card.isFlipped) return;\r\n    if (settingsOpponent === 'computer' && currentPlayer === 'playerB') return;\r\n\r\n    if (settingsIsSoundOn) {\r\n      flipSound.play();\r\n    }\r\n\r\n    setCardIsFlipped(card.uniqueID, true);\r\n\r\n    if (settingsOpponent === 'computer' && !firstCardUID) {\r\n      rememberKnownCards(prev => [...prev, card.uniqueID]);\r\n      rememberUnknownCards(prev => prev.filter(uniqueID => uniqueID !== card.uniqueID));\r\n    }\r\n\r\n    if (!firstCardUID) {\r\n      setFirstCard(card.uniqueID);\r\n    } else {\r\n      onTurnEnd(card.uniqueID);\r\n    }\r\n  }\r\n\r\n  function setCardIsFlipped(uniqueID, isFlipped) {\r\n\t\tsetDeck(prev => prev.map(card => {\r\n\t\t\tif (card.uniqueID !== uniqueID) {\r\n        return card;\r\n      }\r\n\r\n\t\t\treturn {...card, isFlipped};\r\n\t\t}));\r\n  }\r\n\r\n  function onTurnEnd(secondCardUID) {\r\n    if (settingsOpponent === 'computer') {\r\n      rememberUnknownCards(prev => prev.filter(uniqueID => uniqueID !== secondCardUID));\r\n\r\n      if (firstCardUID.split('-')[0] === secondCardUID.split('-')[0]) {\r\n        rememberRestCards(prev => {\r\n          return prev.filter(uniqueID => (uniqueID !== firstCardUID && uniqueID !== secondCardUID));\r\n        });\r\n\r\n        rememberKnownCards(prev => {\r\n          return prev.filter(uniqueID => (uniqueID !== firstCardUID && uniqueID !== secondCardUID));\r\n        });\r\n      } else {\r\n        rememberKnownCards(prev => {\r\n          if (!prev.includes(secondCardUID)) {\r\n            return [...prev, secondCardUID];\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    if (firstCardUID.split('-')[0] === secondCardUID.split('-')[0]) {\r\n      if (currentPlayer === 'playerA') {\r\n        setScoreA(scoreA + 1);\r\n      } else {\r\n        setScoreB(scoreB + 1);\r\n      }\r\n\r\n      resetChoice();\r\n\r\n      setTimeout(() => {\r\n        if (settingsDeckSize / 2 - 1 === scoreA + scoreB) {\r\n          let ladderResult;\r\n\r\n          if ((currentPlayer === 'playerA' && scoreA + 1 > scoreB) || (currentPlayer === 'playerB' && scoreA > scoreB + 1)) {\r\n            ladderResult = 'Player A wins';\r\n          } else if ((currentPlayer === 'playerA' && scoreA + 1 < scoreB) || (currentPlayer === 'playerB' && scoreA < scoreB + 1)) {\r\n            ladderResult = (settingsOpponent === 'user') ? 'Player B wins' : 'Computer wins';\r\n          } else {\r\n            ladderResult = 'Tie';\r\n          }\r\n\r\n          changeLadder([ladderResult, ...ladder].slice(0, 10));\r\n          setGameStatus('gameend');\r\n        }\r\n      }, 1500);\r\n\r\n      return;\r\n    }\r\n\r\n    if (currentPlayer === 'playerA') {\r\n      changePlayer('playerB');\r\n\r\n      if (settingsOpponent === 'computer') {\r\n        computerMakeClick(null, secondCardUID);\r\n      }\r\n    } else {\r\n      changePlayer('playerA');\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setCardIsFlipped(firstCardUID, false);\r\n      setCardIsFlipped(secondCardUID, false);\r\n    }, 800);\r\n\r\n    resetChoice();\r\n  }\r\n\r\n  function resetChoice() {\r\n    setFirstCard(null);\r\n  }\r\n\r\n  function toggleMenuStatistics() {\r\n    showMenuStatistics(!isMenuStatistics);\r\n  }\r\n\r\n  function toggleMenuSettings() {\r\n    showMenuSettings(!isMenuSettings);\r\n  }\r\n\r\n  function onDeckSizeChange(event) {\r\n    setDeckSize(+event.target.value);\r\n    setDeck(makeDeck(cards, +event.target.value));\r\n  }\r\n\r\n  function onOpponentChange(event) {\r\n    setOpponent(event.target.value);\r\n    setGameStatus('gamestart');\r\n  }\r\n\r\n  function changeSoundVolume(event) {\r\n    setSoundVolume(event.target.value);\r\n  }\r\n\r\n  function changeMusicVolume(event) {\r\n    setMusicVolume(event.target.value);\r\n  }\r\n\r\n  function toggleSound(event) {\r\n    switchSound(event.target.checked);\r\n  }\r\n\r\n  function toggleMusic(event) {\r\n    switchMusic(event.target.checked);\r\n  }\r\n\r\n  function toggleNightMode(event) {\r\n    switchNightMode(event.target.checked);\r\n  }\r\n\r\n  function showWinner() {\r\n    let result;\r\n\r\n    if (scoreA > scoreB) {\r\n      result = 'Player A wins';\r\n    } else if (scoreA === scoreB) {\r\n      result = 'Tie';\r\n    } else if (settingsOpponent === 'user') {\r\n      result = 'Player B wins';\r\n    } else {\r\n      result = 'Computer wins';\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function showLadder() {\r\n    return ladder.map((result, index) => <li key={index}>{result}</li>);\r\n  }\r\n\r\n  function startGame() {\r\n    if (settingsOpponent === 'computer') {\r\n      rememberKnownCards([]);\r\n      rememberUnknownCards([]);\r\n    }\r\n\r\n    setDeck(makeDeck(cards, settingsDeckSize));\r\n    setGameStatus('inprogress');\r\n    changePlayer('playerA');\r\n    setScoreA(0);\r\n    setScoreB(0);\r\n\r\n    if (settingsIsMusicOn) {\r\n      gameMusic.play();\r\n\r\n      setTimeout(() => {\r\n        gameMusic.stop();\r\n      }, 30000);\r\n    }\r\n  }\r\n\r\n  function computerMakeClick(firstCardUID = null, secondCardUID = null) {\r\n    setTimeout(() => {\r\n      let tempKnownCardsUIDs = [];\r\n      let tempUnknownCardsUIDs = [];\r\n      let pairs;\r\n\r\n      if (secondCardUID && !computerKnownCardUIDs.includes(secondCardUID)) {\r\n        tempKnownCardsUIDs = [...computerKnownCardUIDs, secondCardUID];\r\n  \r\n        let knownIDs = tempKnownCardsUIDs.map(uniqueID => uniqueID.split('-')[0]);\r\n        pairs = [...new Set(knownIDs.filter((value, index, self) => self.indexOf(value) !== index))];\r\n\r\n        if (pairs.length > 0) {\r\n          if (settingsIsSoundOn) {\r\n            flipSound.play();\r\n          }\r\n\r\n          setCardIsFlipped(pairs[0] + \"-original\", true);\r\n          setTimeout(() => {\r\n            if (settingsIsSoundOn) {\r\n              flipSound.play();\r\n            }\r\n\r\n            setCardIsFlipped(pairs[0] + \"-copy\", true);\r\n          }, 500);\r\n\r\n          setScoreB(scoreB + 1);\r\n\r\n          rememberRestCards(prev => {\r\n            return prev.filter(uniqueID => (uniqueID !== (pairs[0] + \"-original\") && uniqueID !== (pairs[0] + \"-copy\")));\r\n          });\r\n  \r\n          rememberKnownCards(prev => {\r\n            return prev.filter(uniqueID => (uniqueID !== (pairs[0] + \"-original\") && uniqueID !== (pairs[0] + \"-copy\")));\r\n          });\r\n        }\r\n      }\r\n  \r\n      if (secondCardUID && computerUnknownCardUIDs.length > 0) {\r\n        tempUnknownCardsUIDs = computerUnknownCardUIDs.filter(uniqueID => uniqueID !== secondCardUID);\r\n      }\r\n\r\n      if (tempUnknownCardsUIDs.length > 0) {\r\n        let number;\r\n\r\n        if (settingsIsSoundOn) {\r\n          flipSound.play();\r\n        }\r\n\r\n        number = getRndInteger(0, tempUnknownCardsUIDs.length);\r\n        setCardIsFlipped(tempUnknownCardsUIDs[number], true);\r\n\r\n        rememberKnownCards(prev => [...prev, tempUnknownCardsUIDs[number]]);\r\n        rememberUnknownCards(prev => prev.filter(uniqueID => uniqueID !== tempUnknownCardsUIDs[number]));\r\n\r\n        computerMakeClick(tempUnknownCardsUIDs[number], null);\r\n      } else {\r\n        //!!!!!!!!!!! all known logic\r\n        tempKnownCardsUIDs = [...computerKnownCardUIDs];\r\n  \r\n        let knownIDs = tempKnownCardsUIDs.map(uniqueID => uniqueID.split('-')[0]);\r\n        pairs = [...new Set(knownIDs.filter((value, index, self) => self.indexOf(value) !== index))];\r\n\r\n        if (pairs.length > 0) {\r\n          if (settingsIsSoundOn) {\r\n            flipSound.play();\r\n          }\r\n\r\n          setCardIsFlipped(pairs[0] + \"-original\", true);\r\n          setTimeout(() => {\r\n            if (settingsIsSoundOn) {\r\n              flipSound.play();\r\n            }\r\n\r\n            setCardIsFlipped(pairs[0] + \"-copy\", true);\r\n          }, 500);\r\n\r\n          setScoreB(scoreB + 1);\r\n\r\n          rememberRestCards(prev => {\r\n            return prev.filter(uniqueID => (uniqueID !== (pairs[0] + \"-original\") && uniqueID !== (pairs[0] + \"-copy\")));\r\n          });\r\n  \r\n          rememberKnownCards(prev => {\r\n            return prev.filter(uniqueID => (uniqueID !== (pairs[0] + \"-original\") && uniqueID !== (pairs[0] + \"-copy\")));\r\n          });\r\n        }\r\n      }\r\n\r\n      if (firstCardUID) {\r\n        tempKnownCardsUIDs = [...computerKnownCardUIDs, firstCardUID];\r\n\r\n        let knownIDs = tempKnownCardsUIDs.map(uniqueID => uniqueID.split('-')[0]);\r\n        let firstCardID = firstCardUID.split('-')[0];\r\n\r\n        if (knownIDs.includes(firstCardID)) {\r\n          let flipUID;\r\n\r\n          if (firstCardUID.split('-')[1] === 'original') {\r\n            flipUID = firstCardID + \"-copy\";\r\n          } else {\r\n            flipUID = firstCardID + \"-original\";\r\n          }\r\n\r\n          if (settingsIsSoundOn) {\r\n            flipSound.play();\r\n          }\r\n\r\n          setCardIsFlipped(flipUID, true);\r\n          setScoreB(scoreB + 1);\r\n\r\n          rememberRestCards(prev => {\r\n            return prev.filter(uniqueID => (uniqueID !== firstCardUID && uniqueID !== flipUID));\r\n          });\r\n  \r\n          rememberKnownCards(prev => {\r\n            return prev.filter(uniqueID => (uniqueID !== firstCardUID && uniqueID !== flipUID));\r\n          });\r\n\r\n          computerMakeClick();\r\n        } else {\r\n          //random click\r\n        }\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  function getRndInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min) ) + min;\r\n  }\r\n\r\n  return (\r\n    <div className={\"memory-game\"  + (settingsIsNightMode ? ' night-on' : '')}>\r\n      {gameStatus === 'gameend' ? <div className=\"winner\">{showWinner()}</div> : ''}\r\n\r\n      {gameStatus !== 'inprogress' &&\r\n        <div className=\"game-menu-wrapper\">\r\n          <div className=\"game-menu\">\r\n            <button className=\"btn start-game\" onClick={startGame}>\r\n              Start\r\n            </button>\r\n\r\n            <button className=\"btn show-statistics\" onClick={toggleMenuStatistics}>\r\n              Statistics\r\n            </button>\r\n\r\n            <button className=\"btn show-settings\" onClick={toggleMenuSettings}>\r\n              Settings\r\n            </button>\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n      {isMenuSettings &&\r\n        <div className=\"modal settings\">\r\n          <div className=\"deck-size\">\r\n            <label htmlFor=\"deck-size\">Select deck size:</label>\r\n\r\n            <select id=\"deck-size\" value={settingsDeckSize} onChange={onDeckSizeChange}>\r\n              <option value=\"18\">18</option>\r\n              <option value=\"24\">24</option>\r\n              <option value=\"32\">32</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"opponent\">\r\n            <label htmlFor=\"opponent\">Select opponent:</label>\r\n\r\n            <select id=\"opponent\" value={settingsOpponent} onChange={onOpponentChange}>\r\n              <option value=\"user\">user</option>\r\n              <option value=\"computer\">computer</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"night-mode\">\r\n            <label htmlFor=\"night\">Night mode:</label>\r\n            <input\r\n                  type=\"checkbox\"\r\n                  id=\"night\"\r\n                  name=\"night\"\r\n                  defaultChecked={settingsIsNightMode}\r\n                  onChange={toggleNightMode} />\r\n          </div>\r\n\r\n          <div className=\"volume\">\r\n            <p>Audio settings:</p>\r\n\r\n            <div>\r\n              <input\r\n                type=\"range\"\r\n                id=\"sound-volume\"\r\n                name=\"sound-volume\"\r\n                min=\"0\"\r\n                max=\"1\"\r\n                value={settingsSoundVolume}\r\n                onChange={changeSoundVolume}\r\n                step=\".05\" />\r\n\r\n              <input\r\n                type=\"checkbox\"\r\n                defaultChecked={settingsIsSoundOn}\r\n                onChange={toggleSound} />\r\n\r\n              <label htmlFor=\"sound-volume\">Sound</label>\r\n            </div>\r\n\r\n            <div>\r\n              <input\r\n                type=\"range\"\r\n                id=\"music-volume\"\r\n                name=\"music-volume\"\r\n                min=\"0\"\r\n                max=\"1\"\r\n                value={settingsMusicVolume}\r\n                onChange={changeMusicVolume}\r\n                step=\".05\" />\r\n\r\n              <input\r\n                type=\"checkbox\"\r\n                defaultChecked={settingsIsMusicOn}\r\n                onChange={toggleMusic} />\r\n\r\n              <label htmlFor=\"music-volume\">Music</label>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"modal-close\" onClick={toggleMenuSettings}>&#10006;</div>\r\n        </div>\r\n      }\r\n\r\n      {isMenuStatistics &&\r\n        <div className=\"modal statistics\">\r\n          <div className=\"ladder\">\r\n            <ol>\r\n              {showLadder()}\r\n            </ol>\r\n          </div>\r\n          \r\n          <div className=\"modal-close\" onClick={toggleMenuStatistics}>&#10006;</div>\r\n        </div>\r\n      }\r\n\r\n      {gameStatus === 'inprogress' &&\r\n        <div className=\"score\">\r\n          <div className={\"player player-1\" + (currentPlayer === 'playerA' ? ' active' : '')}>Player A</div>\r\n\r\n          <div className=\"points\">\r\n            <span className=\"points-pl1\">{scoreA}</span>\r\n            <span className=\"divider\">:</span>\r\n            <span className=\"points-pl2\">{scoreB}</span>\r\n          </div>\r\n\r\n          <div className={\"player player-2\" + (currentPlayer === 'playerB' ? ' active' : '')}>\r\n            {settingsOpponent === 'user' ? 'Player B' : 'Computer'}\r\n          </div>\r\n        </div>\r\n      }\r\n      \r\n      <div className={\"card-board deck-size-\" + settingsDeckSize}>\r\n        { gameStatus === 'inprogress' && deck.map(card => {\r\n          return <Card card={card} key={card.uniqueID} onClick={() => onCardClick(card)} />\r\n        }) }\r\n      </div>\r\n    </div>\r\n      \r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo_rs_school_js.ad178c0d.svg\";","import React from 'react';\nimport CardBoard from './components/CardBoard/CardBoard';\nimport logo from './images/logo_rs_school_js.svg';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\n\nfunction App() {\n  const fullScreenHandle = useFullScreenHandle();\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Memory Game</h1>\n\n        <button className=\"btn enable-fullscreen\" onClick={fullScreenHandle.enter}>\n          Fullscreen\n        </button>\n      </header>\n\n      <FullScreen handle={fullScreenHandle}>\n        <CardBoard />\n      </FullScreen>\n\n      <footer>\n        <div className=\"developer\">\n          <span className=\"copyright\">©2021</span>\n          <a\n            href=\"https://github.com/DieL89\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Developer's GitHub\n          </a>\n        </div>\n\n        <a\n          className=\"rsschool-logo\"\n          href=\"https://rs.school/js/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <img src={logo} alt=\"RS School Logo\" />\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}